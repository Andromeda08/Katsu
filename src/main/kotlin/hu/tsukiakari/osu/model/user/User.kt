package hu.tsukiakari.osu.model.user

import com.google.gson.annotations.SerializedName
import hu.tsukiakari.osu.model.Country
import hu.tsukiakari.osu.model.user.statistics.Statistics

data class User(
    @SerializedName("avatar_url")       val avatarUrl: String,
    @SerializedName("default_group")    val defaultGroup: String,
    val id: Int,
    @SerializedName("is_active")        val isActive: Boolean,
    @SerializedName("is_bot")           val isBot: Boolean,
    @SerializedName("is_deleted")       val isDeleted: Boolean,
    @SerializedName("is_online")        val isOnline: Boolean,
    @SerializedName("is_supporter")     val isSupporter: Boolean,
    @SerializedName("last_visit")       val lastVisit: String,
    @SerializedName("pm_friends_only")  val pmFriendsOnly: Boolean,
    @SerializedName("profile_colour")   val profileColor: String?,
    val username: String,
    val discord: String?,
    @SerializedName("has_supported")    val hasSupported: Boolean,
    val interests: String?,
    @SerializedName("join_date")        val joinDate: String,
    val kudosu: Kudosu,
    val location: String?,
    @SerializedName("max_blocks")       val maxBlocks: Int,
    @SerializedName("max_friends")      val maxFriends: Int,
    val occupation: String?,
    val playmode: String,
    val playstyle: List<String>?,
    @SerializedName("post_count")       val postCount: Int,
    @SerializedName("profile_order")    val profileOrder: List<String>,
    val title: String?,
    @SerializedName("title_url")        val titleUrl: String?,
    val twitter: String?,
    val website: String?,
    val country: Country,
    val cover: Cover,
    @SerializedName("account_history")  val accountHistory: List<String>,
    val badges: List<Badge>,
    @SerializedName("beatmap_playcounts_count")     val beatmapPlaycount: Int,
    @SerializedName("comment_count")                val commentCount: Int,
    @SerializedName("favourite_beatmapset_count")   val favouriteBeatmapsetCount: Int,
    @SerializedName("follower_counts")              val followerCount: Int,
    @SerializedName("graveyard_beatmapset_count")   val graveyardBeatmapsetCount: Int,
    val groups: List<Group>,
    @SerializedName("guest_beatmapset_count")       val guestBeatmapsetCount: Int,
    @SerializedName("loved_beatmapset_count")       val lovedBeatmapsetCount: Int,
    @SerializedName("mapping_follower_count")       val mappingFollowerCount: Int,
    @SerializedName("monthly_playcounts")           val monthlyPlaycounts: List<MonthlyCount>,
    @SerializedName("nominated_beatmapset_count")   val nominatedBeatmapsetCount: Int,
    @SerializedName("pending_beatmapset_count")     val pendingBeatmapsetCount: Int,
    @SerializedName("previous_usernames")           val previousUsernames: List<String>,
    @SerializedName("rank_highest")                 val rankHighest: RankHighest,
    @SerializedName("ranked_beatmapset_count")      val rankedBeatmapsetCount: Int,
    @SerializedName("replays_watched_counts")       val replaysWatchedCounts: List<MonthlyCount>,
    @SerializedName("scores_best_count")            val scoresBestCount: Int,
    @SerializedName("scores_first_count")           val scoresFirstCount: Int,
    @SerializedName("scores_pinned_count")          val scoresPinnedCount: Int,
    @SerializedName("scores_recent_count")          val scoresRecentCount: Int,
    val statistics: Statistics,
    @SerializedName("support_level")                val supportLevel: Int,
    @SerializedName("user_achievements")            val userAchievements: List<Achievement>,
    @SerializedName("unranked_beatmapset_count")    val unrankedBeatmapsetCount: Int,
    @SerializedName("ranked_and_approved_beatmapset_count") val rankedAndApprovedBeatmapsetCount: Int,

    val error: String?,
)
